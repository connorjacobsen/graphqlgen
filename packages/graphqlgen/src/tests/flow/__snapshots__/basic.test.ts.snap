// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic enum 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import type { Context } from \\"../../../fixtures/enum/types-flow.js\\";
import type { User } from \\"../../../fixtures/enum/types-flow.js\\";
import type { UserType } from \\"../../../fixtures/enum/types-flow.js\\";

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_CreateUser {
  name: string;
  type: UserType;
}

export type Query_CreateUser_Resolver = (
  parent: {},
  args: Query_Args_CreateUser,
  ctx: Context,
  info: GraphQLResolveInfo
) => User | null | Promise<User | null>;

export interface QueryResolvers {
  createUser: (
    parent: {},
    args: Query_Args_CreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;
}

// Types for User
export const User_defaultResolvers = {
  id: (parent: User) => parent.id,
  name: (parent: User) => parent.name,
  type: (parent: User) => parent.type
};

export type User_Id_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Name_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Type_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => UserType | Promise<UserType>;

export interface UserResolvers {
  id: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  type: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserType | Promise<UserType>;
}

export interface Resolvers {
  Query: QueryResolvers;
  User: UserResolvers;
}
"
`;

exports[`basic enum 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { User_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers = {
  ...User_defaultResolvers
};
",
    "force": false,
    "path": "User.js",
  },
  Object {
    "code": "/* @flow */
import type { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers = {
  createUser: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "/* @flow */
import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { User } from \\"./User\\";
import { UserType } from \\"./UserType\\";

export const resolvers: Resolvers = {
  Query,
  User,
  UserType
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`basic scalar 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import type { Context } from \\"../../../fixtures/scalar/flow-types.js\\";
import type { AddMemberPayload } from \\"../../../fixtures/scalar/flow-types.js\\";

// Types for Mutation
export const Mutation_defaultResolvers = {};

export interface AddMemberData {
  email: string;
  projects: string;
}

export interface Mutation_Args_AddMember {
  data: AddMemberData;
}

export type Mutation_AddMember_Resolver = (
  parent: {},
  args: Mutation_Args_AddMember,
  ctx: Context,
  info: GraphQLResolveInfo
) => AddMemberPayload | Promise<AddMemberPayload>;

export interface MutationResolvers {
  addMember: (
    parent: {},
    args: Mutation_Args_AddMember,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AddMemberPayload | Promise<AddMemberPayload>;
}

// Types for AddMemberPayload
export const AddMemberPayload_defaultResolvers = {
  json: (parent: AddMemberPayload) => parent.json
};

export type AddMemberPayload_Json_Resolver = (
  parent: AddMemberPayload,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export interface AddMemberPayloadResolvers {
  json: (
    parent: AddMemberPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
}

export interface Resolvers {
  Mutation: MutationResolvers;
  AddMemberPayload: AddMemberPayloadResolvers;
}
"
`;

exports[`basic scalar 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { AddMemberPayload_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { AddMemberPayloadResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const AddMemberPayload: AddMemberPayloadResolvers = {
  ...AddMemberPayload_defaultResolvers
};
",
    "force": false,
    "path": "AddMemberPayload.js",
  },
  Object {
    "code": "/* @flow */
import type { MutationResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Mutation: MutationResolvers = {
  addMember: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Mutation.js",
  },
  Object {
    "code": "/* @flow */
import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Mutation } from \\"./Mutation\\";
import { AddMemberPayload } from \\"./AddMemberPayload\\";
import { AddMemberData } from \\"./AddMemberData\\";

export const resolvers: Resolvers = {
  Mutation,
  AddMemberPayload,
  AddMemberData
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`basic schema 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import type { Context } from \\"../../../fixtures/basic/types-flow.js\\";
import type { Number } from \\"../../../fixtures/basic/types-flow.js\\";

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_Custom_with_arg {
  id: number;
}

export interface Query_Args_Custom_with_custom_arg {
  id: Number;
}

export interface Query_Args_Scalar_with_arg {
  id: number;
}

export interface Query_Args_Scalar_with_custom_arg {
  id: Number;
}

export type Query_Id_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Query_Custom_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Custom_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | null | Promise<Number | null>;

export type Query_Custom_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number[] | null | Promise<Number[] | null>;

export type Query_Custom_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => Number[] | Promise<Number[]>;

export type Query_Custom_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Custom_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => Number | Promise<Number>;

export type Query_Scalar_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type Query_Scalar_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean[] | null | Promise<boolean[] | null>;

export type Query_Scalar_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean[] | Promise<boolean[]>;

export type Query_Scalar_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface QueryResolvers {
  id: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  custom_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  custom_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | null | Promise<Number | null>;

  custom_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number[] | null | Promise<Number[] | null>;

  custom_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number[] | Promise<Number[]>;

  custom_with_arg: (
    parent: {},
    args: Query_Args_Custom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  custom_with_custom_arg: (
    parent: {},
    args: Query_Args_Custom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Number | Promise<Number>;

  scalar_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  scalar_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | null | Promise<boolean[] | null>;

  scalar_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | Promise<boolean[]>;

  scalar_with_arg: (
    parent: {},
    args: Query_Args_Scalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_with_custom_arg: (
    parent: {},
    args: Query_Args_Scalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

// Types for Number
export const Number_defaultResolvers = {
  id: (parent: Number) => parent.id,
  value: (parent: Number) => parent.value
};

export type Number_Id_Resolver = (
  parent: Number,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Number_Value_Resolver = (
  parent: Number,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export interface NumberResolvers {
  id: (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  value: (
    parent: Number,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
}

export interface Resolvers {
  Query: QueryResolvers;
  Number: NumberResolvers;
}
"
`;

exports[`basic schema 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { Number_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers = {
  ...Number_defaultResolvers
};
",
    "force": false,
    "path": "Number.js",
  },
  Object {
    "code": "/* @flow */
import type { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers = {
  id: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "/* @flow */
import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`basic union 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import type { Context } from \\"../../../fixtures/union/flow-types.js\\";
import type { User } from \\"../../../fixtures/union/flow-types.js\\";
import type { Student } from \\"../../../fixtures/union/flow-types.js\\";
import type { Professor } from \\"../../../fixtures/union/flow-types.js\\";

// Types for User
export const User_defaultResolvers = {
  id: (parent: User) => parent.id,
  name: (parent: User) => parent.name
};

export type User_Id_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Name_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type User_Type_Resolver = (
  parent: User,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => {} | Promise<{}>;

export interface UserResolvers {
  id: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  name: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  type: (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => {} | Promise<{}>;
}

// Types for Student
export const Student_defaultResolvers = {
  age: (parent: Student) => parent.age
};

export type Student_Age_Resolver = (
  parent: Student,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | Promise<number>;

export interface StudentResolvers {
  age: (
    parent: Student,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;
}

// Types for Professor
export const Professor_defaultResolvers = {
  degree: (parent: Professor) => parent.degree
};

export type Professor_Degree_Resolver = (
  parent: Professor,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export interface ProfessorResolvers {
  degree: (
    parent: Professor,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;
}

export interface Resolvers {
  User: UserResolvers;
  Student: StudentResolvers;
  Professor: ProfessorResolvers;
}
"
`;

exports[`basic union 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { User_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { UserResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const User: UserResolvers = {
  ...User_defaultResolvers,

  type: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "User.js",
  },
  Object {
    "code": "/* @flow */
import { Student_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { StudentResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Student: StudentResolvers = {
  ...Student_defaultResolvers
};
",
    "force": false,
    "path": "Student.js",
  },
  Object {
    "code": "/* @flow */
import { Professor_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { ProfessorResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Professor: ProfessorResolvers = {
  ...Professor_defaultResolvers
};
",
    "force": false,
    "path": "Professor.js",
  },
  Object {
    "code": "/* @flow */
import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { User } from \\"./User\\";
import { Student } from \\"./Student\\";
import { Professor } from \\"./Professor\\";

export const resolvers: Resolvers = {
  User,
  Student,
  Professor
};
",
    "force": false,
    "path": "index.js",
  },
]
`;

exports[`defaultName 1`] = `
"/* @flow */
// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from \\"graphql\\";
import type { Context } from \\"../../../fixtures/defaultName/flow-types.js\\";
import type { NumberNode } from \\"../../../fixtures/defaultName/flow-types.js\\";

// Types for Query
export const Query_defaultResolvers = {};

export interface Query_Args_Custom_with_arg {
  id: number;
}

export interface Query_Args_Custom_with_custom_arg {
  id: NumberNode;
}

export interface Query_Args_Scalar_with_arg {
  id: number;
}

export interface Query_Args_Scalar_with_custom_arg {
  id: NumberNode;
}

export type Query_Id_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | Promise<string>;

export type Query_Custom_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode | Promise<NumberNode>;

export type Query_Custom_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode | null | Promise<NumberNode | null>;

export type Query_Custom_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode[] | null | Promise<NumberNode[] | null>;

export type Query_Custom_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode[] | Promise<NumberNode[]>;

export type Query_Custom_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode | Promise<NumberNode>;

export type Query_Custom_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Custom_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => NumberNode | Promise<NumberNode>;

export type Query_Scalar_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | null | Promise<boolean | null>;

export type Query_Scalar_array_nullable_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean[] | null | Promise<boolean[] | null>;

export type Query_Scalar_array_required_Resolver = (
  parent: {},
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean[] | Promise<boolean[]>;

export type Query_Scalar_with_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type Query_Scalar_with_custom_arg_Resolver = (
  parent: {},
  args: Query_Args_Scalar_with_custom_arg,
  ctx: Context,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export interface QueryResolvers {
  id: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  custom_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  custom_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | null | Promise<NumberNode | null>;

  custom_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode[] | null | Promise<NumberNode[] | null>;

  custom_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode[] | Promise<NumberNode[]>;

  custom_with_arg: (
    parent: {},
    args: Query_Args_Custom_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  custom_with_custom_arg: (
    parent: {},
    args: Query_Args_Custom_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => NumberNode | Promise<NumberNode>;

  scalar_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  scalar_array_nullable: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | null | Promise<boolean[] | null>;

  scalar_array_required: (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean[] | Promise<boolean[]>;

  scalar_with_arg: (
    parent: {},
    args: Query_Args_Scalar_with_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  scalar_with_custom_arg: (
    parent: {},
    args: Query_Args_Scalar_with_custom_arg,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;
}

// Types for Number
export const Number_defaultResolvers = {
  id: (parent: NumberNode) => parent.id,
  value: (parent: NumberNode) => parent.value
};

export type Number_Id_Resolver = (
  parent: NumberNode,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => string | null | Promise<string | null>;

export type Number_Value_Resolver = (
  parent: NumberNode,
  args: {},
  ctx: Context,
  info: GraphQLResolveInfo
) => number | null | Promise<number | null>;

export interface NumberResolvers {
  id: (
    parent: NumberNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  value: (
    parent: NumberNode,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;
}

export interface Resolvers {
  Query: QueryResolvers;
  Number: NumberResolvers;
}
"
`;

exports[`defaultName 2`] = `
Array [
  Object {
    "code": "/* @flow */
import { Number_defaultResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";
import type { NumberResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Number: NumberResolvers = {
  ...Number_defaultResolvers
};
",
    "force": false,
    "path": "Number.js",
  },
  Object {
    "code": "/* @flow */
import type { QueryResolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

export const Query: QueryResolvers = {
  id: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  custom_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_nullable: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_array_required: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  },
  scalar_with_custom_arg: (parent, args, ctx) => {
    throw new Error(\\"Resolver not implemented\\");
  }
};
",
    "force": false,
    "path": "Query.js",
  },
  Object {
    "code": "/* @flow */
import type { Resolvers } from \\"[TEMPLATE-INTERFACES-PATH]\\";

import { Query } from \\"./Query\\";
import { Number } from \\"./Number\\";

export const resolvers: Resolvers = {
  Query,
  Number
};
",
    "force": false,
    "path": "index.js",
  },
]
`;
